// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String  @id @default(uuid())
  email             String  @unique
  firstName         String?
  lastName          String?
  password          String?
  isActive          Boolean @default(false)
  role              String  @default("USER")
  totalOrdersAmount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order[]
  address Address?
  loyalty Loyalty?
}

model Loyalty {
  id              String @id @default(uuid())
  percentDiscount Int    @default(2)

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id             String  @id @default(uuid())
  npDepartment   String?
  npDeliveryType String?
  city           String?
  phoneNumber    String?

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id       String  @id @default(uuid())
  totalSum Float
  comment  String?
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int    @default(1)

  productId String
  orderId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Product {
  id          String @id @default(uuid())
  productName String
  description String
  price       Float
  locale      String @default("uk")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images     Image[]
  orderItems OrderItem[]
  properties Property[]
}

model Property {
  id     String @id @default(uuid())
  label  String
  locale String @default("uk")

  imageId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image    @relation(fields: [imageId], references: [id])

  products Product[]
}

model Image {
  id  String @id @default(uuid())
  url String

  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product  Product?   @relation(fields: [productId], references: [id])
  property Property[]
}

model Post {
  id      String @id @default(uuid())
  title   String
  content String

  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
